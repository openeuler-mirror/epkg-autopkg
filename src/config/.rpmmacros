%set_build_flags \
  CFLAGS="${CFLAGS:-%{build_cflags}}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%{build_cxxflags}}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%{build_fflags}}" ; export FFLAGS ; \
  FCFLAGS="${FCFLAGS:-%{build_fflags}}" ; export FCFLAGS

%autogen chmod 755 autogen.sh \
./autogen.sh

# check configure flags, the command is passed to the shell function and executed in the function.
%check_configure_flags \
function configure_flags_func() \
{ \
# check whether the input configure options are available in the software configure \
local new_default_value="" \
args=("$@") \
args_array=() \
for (( i= 1; i < ${#args[@]}; i++)) \
do \
  arg="${args[i]}" \
  new_default_value="$new_default_value $arg" \
  if [[ $arg == *"="* ]]; then \
    key="${arg%%=*}" \
    args_array+=("$key") \
  else \
    args_array+=("$arg") \
  fi \
done \
# get input configure options \
options=$("$1" --help | grep -E "^  --" | awk '{print $1}' | awk -F '=' '{print $1}' ) \
local options_array=($options) \
for item in "${args_array[@]}"; do \
  # delete unexisted options \
  if [[ ! " ${options_array[@]} " =~ " ${item} " ]]; then \
        new_default_value=$( echo $new_default_value | sed "s/$item[^[:space:]]*//" ) \
  fi \
done \
# execute command \
"$1" ${new_default_value} \
} \
configure_flags_func

%configure \
  %{set_build_flags}; \
  [ "%_configure_gnuconfig_hack" = 1 ] && for i in $(find $(dirname %{_configure}) -name config.guess -o -name config.sub) ; do \
      [ -f /usr/lib/rpm/%{_vendor}/$(basename $i) ] && %{__rm} -f $i && %{__cp} -fv /usr/lib/rpm/%{_vendor}/$(basename $i) $i ; \
  done ; \
  [ "%_configure_libtool_hardening_hack" = 1 ] && [ x != "x%{_hardened_ldflags}" ] && \
      for i in $(find . -name ltmain.sh) ; do \
        %{__sed} -i.backup -e 's~compiler_flags=$~compiler_flags="%{_hardened_ldflags}"~' $i \
      done ; \
  %{check_configure_flags} %{_configure} --build=%{_build} --host=%{_host} \\\
	--program-prefix=%{?_program_prefix} \\\
	--disable-dependency-tracking \\\
	%{?_configure_disable_silent_rules:--disable-silent-rules} \\\
	--prefix=%{_prefix} \\\
	--exec-prefix=%{_exec_prefix} \\\
	--bindir=%{_bindir} \\\
	--sbindir=%{_sbindir} \\\
	--sysconfdir=%{_sysconfdir} \\\
	--datadir=%{_datadir} \\\
	--includedir=%{_includedir} \\\
	--libdir=%{_libdir} \\\
	--libexecdir=%{_libexecdir} \\\
	--localstatedir=%{_localstatedir} \\\
	--sharedstatedir=%{_sharedstatedir} \\\
	--mandir=%{_mandir} \\\
	--infodir=%{_infodir}

%cmake \
  CFLAGS="${CFLAGS:-%optflags}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%optflags}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%optflags%{?_fmoddir: -I%_fmoddir}}" ; export FFLAGS ; \
  FCFLAGS="${FCFLAGS:-%optflags%{?_fmoddir: -I%_fmoddir}}" ; export FCFLAGS ; \
  %__cmake \\\
        -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \\\
        -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \\\
        -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \\\
        -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \\\
        -DCMAKE_INSTALL_PREFIX:PATH=%{_prefix} \\\
        -DINCLUDE_INSTALL_DIR:PATH=%{_includedir} \\\
        -DLIB_INSTALL_DIR:PATH=%{_libdir} \\\
        -DSYSCONF_INSTALL_DIR:PATH=%{_sysconfdir} \\\
        -DSHARE_INSTALL_PREFIX:PATH=%{_datadir} \\\
%if "%{?_lib}" == "lib64" \
        %{?_cmake_lib_suffix64} \\\
%endif \
        -DBUILD_SHARED_LIBS:BOOL=ON

%reconfigure \
autoreconf -vif \
%{configure} --disable-werror
